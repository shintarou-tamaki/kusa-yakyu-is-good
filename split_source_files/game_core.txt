# 試合基本機能 Source Code
Generated at: 2025-09-07
File count: 2 files
Purpose: Core game management features

================================================================================
FILE: src/app/games/create/page.tsx
================================================================================

"use client";

import { useState, useEffect } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";

interface Team {
  id: string;
  name: string;
  role?: string;
}

export default function CreateGamePage() {
  const searchParams = useSearchParams();
  const teamIdFromUrl = searchParams.get("teamId");

  const [gameName, setGameName] = useState("");
  const [gameDate, setGameDate] = useState("");
  const [gameTime, setGameTime] = useState("");
  const [location, setLocation] = useState("");
  const [description, setDescription] = useState("");
  const [opponentName, setOpponentName] = useState("");
  const [isPublic, setIsPublic] = useState(true);
  const [attendanceCheckEnabled, setAttendanceCheckEnabled] = useState(false);
  const [category, setCategory] = useState<"official" | "practice" | "scrimmage">("practice");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const [recordType, setRecordType] = useState<"team" | "personal">("team");
  const [selectedTeamId, setSelectedTeamId] = useState("");
  const [teams, setTeams] = useState<Team[]>([]);
  const [isMyTeamBatFirst, setIsMyTeamBatFirst] = useState<boolean | null>(
    null
  );

  const { user } = useAuth();
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    if (user) {
      fetchUserTeams();
    }
  }, [user]);

  useEffect(() => {

    if (teamIdFromUrl && teams.length > 0) {
      const team = teams.find((t) => t.id === teamIdFromUrl);
      if (team) {
        setSelectedTeamId(teamIdFromUrl);
        setRecordType("team");
      }
    }
  }, [teamIdFromUrl, teams]);

  const fetchUserTeams = async () => {
    try {
      const { data, error } = await supabase
        .from("team_members")
        .select(
          `
          team_id,
          role,
          teams (
            id,
            name
          )
        `
        )
        .eq("user_id", user!.id);

      if (error) throw error;

      if (data) {
        const userTeams = data.map((item: any) => ({
          id: item.teams.id,
          name: item.teams.name,
          role: item.role,
        }));
        setTeams(userTeams);

        if (userTeams.length === 1) {
          setSelectedTeamId(userTeams[0].id);
        }
      }
    } catch (error) {
      console.error("チーム取得エラー:", error);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    if (recordType === "team" && selectedTeamId && isMyTeamBatFirst === null) {
      setError("先攻・後攻を選択してください");
      setLoading(false);
      return;
    }

    try {
      const { data, error } = await supabase
        .from("games")
        .insert([
          {
            name: gameName,
            game_date: gameDate,
            game_time: gameTime || null,
            location: location || null,
            description: description || null,
            home_team_id:
              recordType === "team" && selectedTeamId ? selectedTeamId : null,
            opponent_name: opponentName || "未定",
            status: "scheduled",
            record_type:
              recordType === "team" && selectedTeamId ? "team" : "individual",
            is_public: isPublic,
            attendance_check_enabled: attendanceCheckEnabled,
            category: category,
            created_by: user!.id,
          },
        ])
        .select()
        .single();

      if (error) throw error;

      if (data) {

        if (
          recordType === "team" &&
          selectedTeamId &&
          isMyTeamBatFirst !== null
        ) {
          const { error: scoreError } = await supabase
            .from("game_scores")
            .insert([
              {
                game_id: data.id,
                inning: 1,
                is_my_team_bat_first: isMyTeamBatFirst,
              },
            ]);

          if (scoreError) {
            console.error("先攻/後攻情報の保存エラー:", scoreError);
          }
        }

        if (attendanceCheckEnabled && selectedTeamId) {

          const { data: teamMembers, error: tmError } = await supabase
            .from("team_members")
            .select("id")
            .eq("team_id", selectedTeamId);

          if (tmError) {
            console.error("チームメンバー取得エラー:", tmError);
          } else if (teamMembers && teamMembers.length > 0) {

            const attendanceRecords = teamMembers.map((member) => ({
              game_id: data.id,
              team_member_id: member.id,
              status: "pending",
            }));

            const { error: attendanceError } = await supabase
              .from("game_attendances")
              .insert(attendanceRecords);

            if (attendanceError) {
              console.error("出欠レコード作成エラー:", attendanceError);
            }
          }
        }

        router.push(`/games/${data.id}`);
      }
    } catch (error) {
      console.error("試合作成エラー:", error);
      setError("試合の作成に失敗しました");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        {}
        <div className="mb-6">
          <Link
            href={teamIdFromUrl ? `/teams/${teamIdFromUrl}` : "/dashboard"}
            className="inline-flex items-center text-gray-600 hover:text-gray-900"
          >
            <svg
              className="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            {teamIdFromUrl ? "チーム詳細に戻る" : "ダッシュボードに戻る"}
          </Link>
        </div>

        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b">
            <h1 className="text-2xl font-bold text-gray-900">新規試合作成</h1>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {error && (
              <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-600">{error}</p>
              </div>
            )}

            {}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                記録タイプ
              </label>
              <div className="flex space-x-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    value="team"
                    checked={recordType === "team"}
                    onChange={(e) =>
                      setRecordType(e.target.value as "team" | "personal")
                    }
                    className="mr-2"
                  />
                  <span>チーム記録</span>
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    value="personal"
                    checked={recordType === "personal"}
                    onChange={(e) =>
                      setRecordType(e.target.value as "team" | "personal")
                    }
                    className="mr-2"
                  />
                  <span>個人記録</span>
                </label>
              </div>
            </div>

            {}
            {recordType === "team" && (
              <div>
                <label
                  htmlFor="team"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  チーム
                </label>
                <select
                  id="team"
                  value={selectedTeamId}
                  onChange={(e) => setSelectedTeamId(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">チームを選択（任意）</option>
                  {teams.map((team) => (
                    <option key={team.id} value={team.id}>
                      {team.name}
                      {team.role === "owner" && " (オーナー)"}
                    </option>
                  ))}
                </select>
              </div>
            )}

            {}
            {recordType === "team" && selectedTeamId && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  先攻・後攻 <span className="text-red-500">*</span>
                </label>
                <div className="grid grid-cols-2 gap-3">
                  <button
                    type="button"
                    onClick={() => setIsMyTeamBatFirst(true)}
                    className={`py-3 px-4 rounded-lg border-2 font-medium transition-colors ${
                      isMyTeamBatFirst === true
                        ? "border-blue-600 bg-blue-50 text-blue-700"
                        : "border-gray-300 hover:border-gray-400"
                    }`}
                  >
                    先攻（表の攻撃）
                  </button>
                  <button
                    type="button"
                    onClick={() => setIsMyTeamBatFirst(false)}
                    className={`py-3 px-4 rounded-lg border-2 font-medium transition-colors ${
                      isMyTeamBatFirst === false
                        ? "border-green-600 bg-green-50 text-green-700"
                        : "border-gray-300 hover:border-gray-400"
                    }`}
                  >
                    後攻（裏の攻撃）
                  </button>
                </div>
                <p className="mt-2 text-sm text-gray-600">
                  草野球は7回制です。先攻チームは表、後攻チームは裏の攻撃となります。
                </p>
              </div>
            )}

            {}
            <div>
              <label
                htmlFor="gameName"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                試合名 <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="gameName"
                value={gameName}
                onChange={(e) => setGameName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="例: 2024年春季大会 準決勝"
                required
              />
            </div>

            {}
            <div>
              <label
                htmlFor="opponent"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                対戦相手
              </label>
              <input
                type="text"
                id="opponent"
                value={opponentName}
                onChange={(e) => setOpponentName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="例: 山田タイガース"
              />
            </div>

{}
<div>
  <label className="block text-sm font-medium text-gray-700 mb-2">
    試合カテゴリー *
  </label>
  <select
    value={category}
    onChange={(e) => setCategory(e.target.value as "official" | "practice" | "scrimmage")}
    required
    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
  >
    <option value="official">公式戦</option>
    <option value="practice">練習試合</option>
    <option value="scrimmage">紅白戦</option>
  </select>
</div>

            {}
            <div>
              <label
                htmlFor="gameDate"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                試合日 <span className="text-red-500">*</span>
              </label>
              <input
                type="date"
                id="gameDate"
                value={gameDate}
                onChange={(e) => setGameDate(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                required
              />
            </div>

            {}
            <div>
              <label
                htmlFor="gameTime"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                開始時間
              </label>
              <input
                type="time"
                id="gameTime"
                value={gameTime}
                onChange={(e) => setGameTime(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {}
            <div>
              <label
                htmlFor="location"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                場所
              </label>
              <input
                type="text"
                id="location"
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="例: 市民球場"
              />
            </div>

            {}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                説明
              </label>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="試合に関するメモなど"
              />
            </div>

            {}
            {recordType === "team" && selectedTeamId && (
              <div className="border-t pt-4">
                <label className="flex items-center space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={attendanceCheckEnabled}
                    onChange={(e) =>
                      setAttendanceCheckEnabled(e.target.checked)
                    }
                    className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <div>
                    <span className="text-sm font-medium text-gray-700">
                      出欠確認を有効にする
                    </span>
                    <p className="text-xs text-gray-500 mt-1">
                      チームメンバーに出欠確認を求めることができます
                    </p>
                  </div>
                </label>
              </div>
            )}

            {}
            <div>
              <label className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  checked={isPublic}
                  onChange={(e) => setIsPublic(e.target.checked)}
                  className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm font-medium text-gray-700">
                  この試合を公開する
                </span>
              </label>
            </div>

            {}
            <div className="flex justify-end">
              <button
                type="submit"
                disabled={loading}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                {loading ? "作成中..." : "試合を作成"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: src/app/games/page.tsx
================================================================================

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import Link from "next/link";

interface Game {
  id: string;
  name: string;
  game_date: string;
  game_time: string | null;
  location: string | null;
  opponent_name: string;
  status: string;
  home_score: number;
  opponent_score: number;
  home_team_id: string | null;
  category?: "official" | "practice" | "scrimmage";
  teams?: {
    name: string;
  };
  record_type: string;
  created_by: string;
  attendance_check_enabled: boolean;
}

interface MyAttendanceStatus {
  status: "attending" | "absent" | "pending" | null;
  teamMemberId: string | null;
}

interface AttendanceCount {
  attending: number;
  total: number;
}

export default function GamesPage() {
  const [games, setGames] = useState<Game[]>([]);
  const [myAttendanceStatuses, setMyAttendanceStatuses] = useState<Record<string, MyAttendanceStatus>>({});
  const [attendanceCounts, setAttendanceCounts] = useState<Record<string, AttendanceCount>>({});
  const [loading, setLoading] = useState(true);
  const [deleting, setDeleting] = useState<string | null>(null);
  const { user } = useAuth();
  const supabase = createClientComponentClient();

  useEffect(() => {
    if (user) {
      fetchGames();
    }
  }, [user]);

  const fetchGames = async () => {
    try {

      const { data: createdGames, error: createdError } = await supabase
        .from("games")
        .select(
          `
          *,
          teams:home_team_id(name)
        `
        )
        .eq("created_by", user?.id)
        .order("game_date", { ascending: false });

      if (createdError) throw createdError;

      const { data: teamMemberships, error: membershipError } = await supabase
        .from("team_members")
        .select("team_id, id")
        .eq("user_id", user?.id);

      if (membershipError) throw membershipError;

      const teamIds = teamMemberships?.map((m) => m.team_id) || [];
      const teamMemberIds = teamMemberships?.map((m) => m.id) || [];

      const { data: ownedTeams, error: ownedError } = await supabase
        .from("teams")
        .select("id")
        .eq("owner_id", user?.id);

      if (ownedError) throw ownedError;

      if (ownedTeams) {
        teamIds.push(...ownedTeams.map((t) => t.id));
      }

      let teamGames: Game[] = [];
      if (teamIds.length > 0) {
        const { data, error: teamGamesError } = await supabase
          .from("games")
          .select(
            `
            *,
            teams:home_team_id(name)
          `
          )
          .in("home_team_id", teamIds)
          .order("game_date", { ascending: false });

        if (teamGamesError) throw teamGamesError;
        teamGames = data || [];
      }

      const allGames = [...(createdGames || []), ...teamGames];
      const uniqueGames = Array.from(
        new Map(allGames.map((game) => [game.id, game])).values()
      );

      setGames(uniqueGames);

      await fetchMyAttendanceStatuses(uniqueGames.filter(g => g.attendance_check_enabled), teamMemberIds);
      await fetchAttendanceCounts(uniqueGames.filter(g => g.attendance_check_enabled));
    } catch (error) {
      console.error("試合の取得エラー:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchMyAttendanceStatuses = async (gamesWithAttendance: Game[], teamMemberIds: string[]) => {
    if (gamesWithAttendance.length === 0 || teamMemberIds.length === 0) return;

    const gameIds = gamesWithAttendance.map(g => g.id);

    try {
      const { data, error } = await supabase
        .from("game_attendances")
        .select("game_id, status, team_member_id")
        .in("game_id", gameIds)
        .in("team_member_id", teamMemberIds);

      if (error) throw error;

      const statuses: Record<string, MyAttendanceStatus> = {};

      gamesWithAttendance.forEach(game => {
        const myAttendance = data?.find(a => a.game_id === game.id);

        statuses[game.id] = {
          status: myAttendance?.status || null,
          teamMemberId: myAttendance?.team_member_id || null
        };
      });

      setMyAttendanceStatuses(statuses);
    } catch (error) {
      console.error("出欠状態の取得エラー:", error);
    }
  };

  const fetchAttendanceCounts = async (gamesWithAttendance: Game[]) => {
    if (gamesWithAttendance.length === 0) return;

    const gameIds = gamesWithAttendance.map(g => g.id);

    try {
      const { data, error } = await supabase
        .from("game_attendances")
        .select("game_id, status")
        .in("game_id", gameIds);

      if (error) throw error;

      const counts: Record<string, AttendanceCount> = {};

      gamesWithAttendance.forEach(game => {
        const gameAttendances = data?.filter(a => a.game_id === game.id) || [];

        counts[game.id] = {
          attending: gameAttendances.filter(a => a.status === "attending").length,
          total: gameAttendances.length
        };
      });

      setAttendanceCounts(counts);
    } catch (error) {
      console.error("参加人数の取得エラー:", error);
    }
  };

  const handleDelete = async (gameId: string) => {
    if (!confirm("この試合を削除してもよろしいですか？\n関連するすべてのデータが削除されます。")) {
      return;
    }

    setDeleting(gameId);

    try {

      await supabase.from("game_attendances").delete().eq("game_id", gameId);

      await supabase.from("game_runners").delete().eq("game_id", gameId);

      await supabase.from("game_batting_records").delete().eq("game_id", gameId);

      await supabase.from("game_pitching_records").delete().eq("game_id", gameId);

      await supabase.from("game_substitutions").delete().eq("game_id", gameId);

      await supabase.from("game_players").delete().eq("game_id", gameId);

      await supabase.from("game_scores").delete().eq("game_id", gameId);

      await supabase.from("game_operation_tasks").delete().eq("game_id", gameId);

      const { error } = await supabase
        .from("games")
        .delete()
        .eq("id", gameId);

      if (error) throw error;

      setGames(games.filter(g => g.id !== gameId));

      const newStatuses = { ...myAttendanceStatuses };
      delete newStatuses[gameId];
      setMyAttendanceStatuses(newStatuses);

      const newCounts = { ...attendanceCounts };
      delete newCounts[gameId];
      setAttendanceCounts(newCounts);

      alert("試合を削除しました");
    } catch (error) {
      console.error("削除エラー:", error);
      alert("削除に失敗しました");
    } finally {
      setDeleting(null);
    }
  };

  const getMyAttendanceDisplay = (gameId: string) => {
    const myStatus = myAttendanceStatuses[gameId];
    if (!myStatus || !myStatus.status) return null;

    switch (myStatus.status) {
      case "attending":
        return (
          <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-semibold rounded-full">
            出席
          </span>
        );
      case "absent":
        return (
          <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs font-semibold rounded-full">
            欠席
          </span>
        );
      case "pending":
        return (
          <span className="px-2 py-1 bg-red-100 text-red-700 text-xs font-semibold rounded-full animate-pulse">
            ⚠️ 未回答
          </span>
        );
      default:
        return null;
    }
  };

  const getParticipantCount = (gameId: string) => {
    const count = attendanceCounts[gameId];
    if (!count) return null;

    const attending = count.attending;
    const isAlert = attending < 9;

    return (
      <div className={`font-semibold ${isAlert ? 'text-red-600' : 'text-gray-900'}`}>
        {attending}人
        {isAlert && (
          <span className="ml-1 text-xs">
            (要追加募集)
          </span>
        )}
      </div>
    );
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {}
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-900">試合管理</h1>
          <Link
            href="/games/create"
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
          >
            新規試合作成
          </Link>
        </div>

        {}
        {games.length === 0 ? (
          <div className="bg-white rounded-lg shadow p-8 text-center">
            <p className="text-gray-600 mb-4">試合がまだありません</p>
            <Link
              href="/games/create"
              className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
            >
              最初の試合を作成
            </Link>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    試合名
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
  カテゴリー
</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    日付
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    対戦相手
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    スコア
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ステータス
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    出欠回答
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    参加人数
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    操作
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {games.map((game) => (
                  <tr key={game.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Link
                        href={`/games/${game.id}?from=management`}
                        className="text-blue-600 hover:text-blue-700"
                      >
                        {game.name}
                      </Link>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
  {game.category ? (
    <span className={`px-2 py-1 text-xs font-medium rounded-full ${
      game.category === 'official'
        ? 'bg-red-100 text-red-800'
        : game.category === 'practice'
        ? 'bg-blue-100 text-blue-800'
        : 'bg-green-100 text-green-800'
    }`}>
      {game.category === 'official' ? '公式戦'
        : game.category === 'practice' ? '練習試合'
        : '紅白戦'}
    </span>
  ) : (
    <span className="text-gray-400 text-xs">-</span>
  )}
</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(game.game_date).toLocaleDateString("ja-JP")}
                      {game.game_time && ` ${game.game_time}`}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {game.opponent_name}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {game.status === "completed" || game.status === "in_progress"
                        ? `${game.home_score} - ${game.opponent_score}`
                        : "-"}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                        ${
                          game.status === "scheduled"
                            ? "bg-gray-100 text-gray-800"
                            : game.status === "in_progress"
                            ? "bg-yellow-100 text-yellow-800"
                            : game.status === "completed"
                            ? "bg-green-100 text-green-800"
                            : "bg-red-100 text-red-800"
                        }`}
                      >
                        {game.status === "scheduled"
                          ? "予定"
                          : game.status === "in_progress"
                          ? "進行中"
                          : game.status === "completed"
                          ? "終了"
                          : "中止"}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {game.attendance_check_enabled ? (
                        getMyAttendanceDisplay(game.id) || (
                          <span className="text-gray-400 text-xs">-</span>
                        )
                      ) : (
                        <span className="text-gray-400 text-xs">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {game.attendance_check_enabled ? (
                        getParticipantCount(game.id)
                      ) : (
                        <span className="text-gray-400 text-xs">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      {game.created_by === user?.id && (
                        <button
                          onClick={() => handleDelete(game.id)}
                          disabled={deleting === game.id}
                          className="text-red-600 hover:text-red-700 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                          {deleting === game.id ? "削除中..." : "削除"}
                        </button>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}


