# チーム管理機能 Source Code
Generated at: 2025-09-02
File count: 5 files
Purpose: Team management and related features

================================================================================
FILE: src/app/teams/[teamId]/edit/page.tsx
================================================================================

"use client";

import { use, useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { prefectures, cities } from "@/lib/japanData";

interface Team {
  id: string;
  name: string;
  description: string;
  prefecture: string | null;
  city: string | null;
  owner_id: string;
  created_at: string;
  updated_at: string;
}

interface PageProps {
  params: Promise<{
    teamId: string;
  }>;
}

export default function EditTeamPage({ params }: PageProps) {

  const resolvedParams = use(params);
  const teamId = resolvedParams.teamId;

  const [team, setTeam] = useState<Team | null>(null);
  const [teamName, setTeamName] = useState("");
  const [description, setDescription] = useState("");
  const [prefecture, setPrefecture] = useState("");
  const [city, setCity] = useState("");
  const [availableCities, setAvailableCities] = useState<string[]>([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState("");
  const { user } = useAuth();
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    if (user && teamId) {
      fetchTeam();
    }
  }, [user, teamId]);

  useEffect(() => {
    if (prefecture) {
      setAvailableCities(cities[prefecture] || []);

      if (city && !cities[prefecture]?.includes(city)) {
        setCity("");
      }
    } else {
      setAvailableCities([]);
      setCity("");
    }
  }, [prefecture]);

  const fetchTeam = async () => {
    try {
      const { data, error } = await supabase
        .from("teams")
        .select("*")
        .eq("id", teamId)
        .single();

      if (error) {
        console.error("チーム取得エラー:", error);
        router.push("/teams");
        return;
      }

      if (!data) {
        router.push("/teams");
        return;
      }

      if (data.owner_id !== user?.id) {
        alert("このチームを編集する権限がありません");
        router.push(`/teams/${teamId}`);
        return;
      }

      setTeam(data);
      setTeamName(data.name);
      setDescription(data.description || "");
      setPrefecture(data.prefecture || "");
      setCity(data.city || "");

      if (data.prefecture) {
        setAvailableCities(cities[data.prefecture] || []);
      }
    } catch (error) {
      console.error("チーム取得エラー:", error);
      router.push("/teams");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!teamName.trim()) {
      setError("チーム名を入力してください");
      return;
    }

    setSaving(true);
    setError("");

    try {
      const { error: updateError } = await supabase
        .from("teams")
        .update({
          name: teamName.trim(),
          description: description.trim() || null,
          prefecture: prefecture || null,
          city: city || null,
          updated_at: new Date().toISOString(),
        })
        .eq("id", teamId);

      if (updateError) {
        console.error("チーム更新エラー:", updateError);
        setError("チームの更新に失敗しました");
        return;
      }

      router.push(`/teams/${teamId}`);
    } catch (error) {
      console.error("チーム更新エラー:", error);
      setError("チームの更新に失敗しました");
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!team) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">チームが見つかりません</p>
          <Link href="/teams" className="text-blue-600 hover:text-blue-700">
            チーム一覧に戻る
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        {}
        <div className="mb-6">
          <Link
            href={`/teams/${teamId}`}
            className="inline-flex items-center text-gray-600 hover:text-gray-900"
          >
            <svg
              className="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            チーム詳細に戻る
          </Link>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <h1 className="text-2xl font-bold text-gray-900 mb-6">
            チーム情報を編集
          </h1>

          {error && (
            <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-600">{error}</p>
            </div>
          )}

          <form onSubmit={handleSubmit}>
            {}
            <div className="mb-6">
              <label
                htmlFor="teamName"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                チーム名 <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="teamName"
                value={teamName}
                onChange={(e) => setTeamName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="例: 草野球チーム太陽"
                maxLength={50}
                required
              />
              <p className="mt-1 text-sm text-gray-500">
                {teamName.length}/50文字
              </p>
            </div>

            {}
            <div className="mb-6">
              <label
                htmlFor="description"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                チームの説明
              </label>
              <textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="チームの特徴や活動内容を入力してください"
                rows={4}
                maxLength={200}
              />
              <p className="mt-1 text-sm text-gray-500">
                {description.length}/200文字
              </p>
            </div>

            {}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                主な活動地域
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    htmlFor="prefecture"
                    className="block text-xs text-gray-600 mb-1"
                  >
                    都道府県
                  </label>
                  <select
                    id="prefecture"
                    value={prefecture}
                    onChange={(e) => setPrefecture(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">選択してください</option>
                    {prefectures.map((pref) => (
                      <option key={pref} value={pref}>
                        {pref}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label
                    htmlFor="city"
                    className="block text-xs text-gray-600 mb-1"
                  >
                    市区町村
                  </label>
                  <select
                    id="city"
                    value={city}
                    onChange={(e) => setCity(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={!prefecture}
                  >
                    <option value="">
                      {prefecture ? "選択してください" : "都道府県を先に選択"}
                    </option>
                    {availableCities.map((cityName) => (
                      <option key={cityName} value={cityName}>
                        {cityName}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <p className="mt-1 text-xs text-gray-500">
                チームの主な活動地域を設定すると、近くのチームを探しやすくなります
              </p>
            </div>

            {}
            <div className="mb-6 p-4 bg-gray-50 rounded-lg">
              <h3 className="text-sm font-medium text-gray-700 mb-2">
                チーム情報
              </h3>
              <dl className="text-sm space-y-1">
                <div className="flex">
                  <dt className="text-gray-600 w-24">作成日:</dt>
                  <dd className="text-gray-900">
                    {new Date(team.created_at).toLocaleDateString("ja-JP")}
                  </dd>
                </div>
                <div className="flex">
                  <dt className="text-gray-600 w-24">更新日:</dt>
                  <dd className="text-gray-900">
                    {new Date(team.updated_at).toLocaleDateString("ja-JP")}
                  </dd>
                </div>
              </dl>
            </div>

            {}
            <div className="flex justify-end space-x-4">
              <Link
                href={`/teams/${teamId}`}
                className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
              >
                キャンセル
              </Link>
              <button
                type="submit"
                disabled={saving || !teamName.trim()}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {saving ? (
                  <span className="flex items-center">
                    <svg
                      className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                      fill="none"
                      viewBox="0 0 24 24"
                    >
                      <circle
                        className="opacity-25"
                        cx="12"
                        cy="12"
                        r="10"
                        stroke="currentColor"
                        strokeWidth="4"
                      />
                      <path
                        className="opacity-75"
                        fill="currentColor"
                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
                      />
                    </svg>
                    保存中...
                  </span>
                ) : (
                  "変更を保存"
                )}
              </button>
            </div>
          </form>

          {}
          <div className="mt-8 pt-8 border-t border-gray-200">
            <h3 className="text-lg font-semibold text-red-600 mb-2">
              危険な操作
            </h3>
            <p className="text-sm text-gray-600 mb-4">
              チームを削除すると、関連するすべてのデータが失われます。この操作は取り消せません。
            </p>
            <button
              onClick={() => {
                if (
                  confirm(
                    "本当にこのチームを削除しますか？この操作は取り消せません。"
                  )
                ) {

                  supabase
                    .from("teams")
                    .delete()
                    .eq("id", teamId)
                    .then(({ error }) => {
                      if (error) {
                        alert("チームの削除に失敗しました");
                      } else {
                        router.push("/teams");
                      }
                    });
                }
              }}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              チームを削除
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: src/app/teams/[teamId]/games/page.tsx
================================================================================

"use client";

import { use, useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import { useRouter } from "next/navigation";
import Link from "next/link";

interface Game {
  id: string;
  name: string;
  game_date: string;
  game_time: string | null;
  location: string | null;
  opponent_name: string;
  status: "scheduled" | "in_progress" | "completed" | "cancelled";
  home_score: number;
  opponent_score: number;
  created_at: string;
}

interface Team {
  id: string;
  name: string;
  description: string;
}

interface PageProps {
  params: Promise<{
    teamId: string;
  }>;
}

export default function TeamGamesPage({ params }: PageProps) {
  const resolvedParams = use(params);
  const teamId = resolvedParams.teamId;

  const [team, setTeam] = useState<Team | null>(null);
  const [games, setGames] = useState<Game[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<"all" | "scheduled" | "completed">(
    "all"
  );
  const [isTeamMember, setIsTeamMember] = useState(false);
  const { user } = useAuth();
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    if (teamId) {
      fetchTeamAndGames();
    }
  }, [teamId, user]);

  const fetchTeamAndGames = async () => {
    try {

      const { data: teamData, error: teamError } = await supabase
        .from("teams")
        .select("*")
        .eq("id", teamId)
        .single();

      if (teamError || !teamData) {
        console.error("チーム取得エラー:", teamError);
        router.push("/teams");
        return;
      }

      setTeam(teamData);

      let memberStatus = false;
      if (user) {
        const { data: memberData } = await supabase
          .from("team_members")
          .select("id")
          .eq("team_id", teamId)
          .eq("user_id", user.id)
          .single();

        memberStatus = !!memberData || teamData.owner_id === user.id;
      }
      setIsTeamMember(memberStatus);

      let query = supabase
        .from("games")
        .select("*")
        .eq("home_team_id", teamId)
        .order("game_date", { ascending: false });

      if (!memberStatus) {
        query = query.eq("status", "completed");
      }

      const { data: gamesData, error: gamesError } = await query;

      if (gamesError) {
        console.error("試合取得エラー:", gamesError);
        setGames([]);
      } else {
        setGames(gamesData || []);
      }
    } catch (error) {
      console.error("データ取得エラー:", error);
    } finally {
      setLoading(false);
    }
  };

  const getFilteredGames = () => {
    switch (filter) {
      case "scheduled":
        return games.filter((game) => game.status === "scheduled");
      case "completed":
        return games.filter((game) => game.status === "completed");
      default:
        return games;
    }
  };

  const getStatusColor = (status: Game["status"]) => {
    switch (status) {
      case "scheduled":
        return "bg-blue-100 text-blue-800";
      case "in_progress":
        return "bg-yellow-100 text-yellow-800";
      case "completed":
        return "bg-green-100 text-green-800";
      case "cancelled":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: Game["status"]) => {
    switch (status) {
      case "scheduled":
        return "予定";
      case "in_progress":
        return "進行中";
      case "completed":
        return "終了";
      case "cancelled":
        return "中止";
      default:
        return status;
    }
  };

  const getGameResult = (game: Game) => {
    if (game.status !== "completed") return null;

    const homeWin = game.home_score > game.opponent_score;
    const draw = game.home_score === game.opponent_score;

    if (draw) {
      return <span className="text-gray-600 font-semibold">引き分け</span>;
    }
    return homeWin ? (
      <span className="text-blue-600 font-semibold">勝利</span>
    ) : (
      <span className="text-red-600 font-semibold">敗北</span>
    );
  };

  const stats = {
    total: games.length,
    completed: games.filter((g) => g.status === "completed").length,
    wins: games.filter(
      (g) => g.status === "completed" && g.home_score > g.opponent_score
    ).length,
    losses: games.filter(
      (g) => g.status === "completed" && g.home_score < g.opponent_score
    ).length,
    draws: games.filter(
      (g) => g.status === "completed" && g.home_score === g.opponent_score
    ).length,
    scheduled: games.filter((g) => g.status === "scheduled").length,
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!team) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">チームが見つかりません</p>
          <Link href="/teams" className="text-blue-600 hover:text-blue-700">
            チーム一覧に戻る
          </Link>
        </div>
      </div>
    );
  }

  const filteredGames = getFilteredGames();

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {}
        <div className="mb-6">
          <Link
            href={`/teams/${teamId}`}
            className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-4"
          >
            <svg
              className="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            チーム詳細に戻る
          </Link>

          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                {team.name} の試合履歴
              </h1>
              <p className="text-gray-600 mt-1">
                {isTeamMember ? `全 ${games.length} 試合` : `完了試合 ${games.length} 試合`}
              </p>
            </div>
            {}
            {user && isTeamMember && (
              <Link
                href={`/games/create?teamId=${teamId}`}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                新しい試合を作成
              </Link>
            )}
          </div>
        </div>

        {}
        {!isTeamMember && !loading && (
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex">
              <svg
                className="w-5 h-5 text-blue-600 mt-0.5 mr-2"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
                  clipRule="evenodd"
                />
              </svg>
              <div className="text-sm text-blue-800">
                <p className="font-semibold">閲覧制限のお知らせ</p>
                <p>
                  チームメンバー以外の方は、完了した試合のみ閲覧できます。
                </p>
                {user ? (
                  <p>
                    チームに参加すると、すべての試合情報を閲覧できるようになります。
                  </p>
                ) : (
                  <p>
                    ログインしてチームに参加すると、すべての試合情報を閲覧できるようになります。
                  </p>
                )}
              </div>
            </div>
          </div>
        )}

        {}
        <div className="grid grid-cols-2 md:grid-cols-6 gap-4 mb-8">
          <div className="bg-white rounded-lg shadow p-4 text-center">
            <div className="text-2xl font-bold text-gray-900">
              {isTeamMember ? stats.total : stats.completed}
            </div>
            <div className="text-sm text-gray-600">
              {isTeamMember ? "全試合" : "公開試合"}
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-4 text-center">
            <div className="text-2xl font-bold text-green-600">
              {stats.completed}
            </div>
            <div className="text-sm text-gray-600">完了</div>
          </div>
          <div className="bg-white rounded-lg shadow p-4 text-center">
            <div className="text-2xl font-bold text-blue-600">{stats.wins}</div>
            <div className="text-sm text-gray-600">勝利</div>
          </div>
          <div className="bg-white rounded-lg shadow p-4 text-center">
            <div className="text-2xl font-bold text-red-600">
              {stats.losses}
            </div>
            <div className="text-sm text-gray-600">敗北</div>
          </div>
          <div className="bg-white rounded-lg shadow p-4 text-center">
            <div className="text-2xl font-bold text-gray-600">
              {stats.draws}
            </div>
            <div className="text-sm text-gray-600">引分</div>
          </div>
          {isTeamMember && (
            <div className="bg-white rounded-lg shadow p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {stats.scheduled}
              </div>
              <div className="text-sm text-gray-600">予定</div>
            </div>
          )}
        </div>

        {}
        {isTeamMember && (
          <div className="bg-white rounded-lg shadow mb-6">
            <div className="p-4 border-b">
              <div className="flex space-x-4">
                <button
                  onClick={() => setFilter("all")}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    filter === "all"
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                  }`}
                >
                  すべて ({games.length})
                </button>
                <button
                  onClick={() => setFilter("scheduled")}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    filter === "scheduled"
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                  }`}
                >
                  予定 ({stats.scheduled})
                </button>
                <button
                  onClick={() => setFilter("completed")}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                    filter === "completed"
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                  }`}
                >
                  終了 ({stats.completed})
                </button>
              </div>
            </div>
          </div>
        )}

        {}
        <div className="bg-white rounded-lg shadow">
          {filteredGames.length === 0 ? (
            <div className="p-8 text-center">
              <p className="text-gray-500">
                {!isTeamMember
                  ? "完了した試合がまだありません"
                  : filter === "all"
                  ? "試合がまだありません"
                  : `${
                      filter === "scheduled" ? "予定" : "終了"
                    }した試合がありません`}
              </p>
            </div>
          ) : (
            <div className="divide-y">
              {filteredGames.map((game) => (
                <Link
                  key={game.id}
                  href={`/games/${game.id}`}
                  className="block p-6 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="text-lg font-semibold text-gray-900">
                          {game.name}
                        </h3>
                        <span
                          className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(
                            game.status
                          )}`}
                        >
                          {getStatusText(game.status)}
                        </span>
                        {getGameResult(game)}
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-gray-600">
                        <div className="flex items-center">
                          <svg
                            className="w-4 h-4 mr-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                            />
                          </svg>
                          {new Date(game.game_date).toLocaleDateString("ja-JP")}
                          {game.game_time && ` ${game.game_time}`}
                        </div>

                        <div className="flex items-center">
                          <svg
                            className="w-4 h-4 mr-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
                            />
                          </svg>
                          vs {game.opponent_name}
                        </div>

                        {game.location && (
                          <div className="flex items-center">
                            <svg
                              className="w-4 h-4 mr-1"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                              />
                            </svg>
                            {game.location}
                          </div>
                        )}
                      </div>
                    </div>

                    {}
                    {game.status === "completed" && (
                      <div className="ml-4 text-right">
                        <div className="text-2xl font-bold">
                          <span
                            className={
                              game.home_score > game.opponent_score
                                ? "text-blue-600"
                                : "text-gray-900"
                            }
                          >
                            {game.home_score}
                          </span>
                          <span className="mx-2 text-gray-400">-</span>
                          <span
                            className={
                              game.opponent_score > game.home_score
                                ? "text-red-600"
                                : "text-gray-900"
                            }
                          >
                            {game.opponent_score}
                          </span>
                        </div>
                      </div>
                    )}
                  </div>
                </Link>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: src/app/teams/[teamId]/page.tsx
================================================================================

"use client";

import { use, useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import { useRouter } from "next/navigation";
import Link from "next/link";
import TeamMemberStats from "@/components/stats/TeamMemberStats";
import TeamOperationStats from "@/components/stats/TeamOperationStats";

interface Team {
  id: string;
  name: string;
  description: string | null;
  prefecture: string | null;
  city: string | null;
  owner_id: string;
  created_at: string;
  updated_at: string;
}

interface TeamMember {
  id: string;
  user_id: string;
  role: string;
  joined_at: string;
  user_profiles: {
    id: string;
    display_name: string | null;
  } | null;
}

interface JoinRequest {
  id: string;
  user_id: string;
  status: "pending" | "approved" | "rejected";
  message: string | null;
  requested_at: string;
  user_profiles?: {
    id: string;
    display_name: string | null;
  };
}

interface Game {
  id: string;
  name: string;
  game_date: string;
  game_time: string | null;
  location: string | null;
  opponent_name: string;
  status: "scheduled" | "in_progress" | "completed" | "cancelled";
  home_score: number;
  opponent_score: number;
}

interface PageProps {
  params: Promise<{
    teamId: string;
  }>;
}

export default function TeamDetailPage({ params }: PageProps) {
  const resolvedParams = use(params);
  const teamId = resolvedParams.teamId;

  const [team, setTeam] = useState<Team | null>(null);
  const [members, setMembers] = useState<TeamMember[]>([]);
  const [joinRequests, setJoinRequests] = useState<JoinRequest[]>([]);
  const [completedGames, setCompletedGames] = useState<Game[]>([]);
  const [upcomingGames, setUpcomingGames] = useState<Game[]>([]);
  const [loading, setLoading] = useState(true);
  const [isOwner, setIsOwner] = useState(false);
  const [isMember, setIsMember] = useState(false);
  const [hasRequestPending, setHasRequestPending] = useState(false);
  const [joinMessage, setJoinMessage] = useState("");
  const [submitting, setSubmitting] = useState(false);
  const { user } = useAuth();
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {
    if (teamId) {
      fetchTeamData();
    }
  }, [teamId, user]);

  const fetchTeamData = async () => {
    try {

      const { data: teamData, error: teamError } = await supabase
        .from("teams")
        .select("*")
        .eq("id", teamId)
        .single();

      if (teamError || !teamData) {
        console.error("チーム取得エラー:", teamError);
        router.push("/teams");
        return;
      }

      setTeam(teamData);

      const { data: completedData } = await supabase
        .from("games")
        .select("*")
        .eq("home_team_id", teamId)
        .eq("status", "completed")
        .order("game_date", { ascending: false })
        .limit(5);

      if (completedData) {
        setCompletedGames(completedData);
      }

      if (user) {
        setIsOwner(teamData.owner_id === user.id);

        const { data: memberCheck } = await supabase
          .from("team_members")
          .select("id")
          .eq("team_id", teamId)
          .eq("user_id", user.id)
          .single();

        const isTeamMember = !!memberCheck || teamData.owner_id === user.id;
        setIsMember(isTeamMember);

        if (isTeamMember) {

          const { data: membersData, error: membersError } = await supabase
            .from("team_members")
            .select("*")
            .eq("team_id", teamId)
            .order("joined_at", { ascending: true });

          console.log("メンバー取得結果:", membersData);
          console.log("メンバー取得エラー:", membersError);

          if (membersData) {

            const userIds = membersData.map((m) => m.user_id);

            const { data: profiles, error: profilesError } = await supabase
              .from("user_profiles")
              .select("id, display_name")
              .in("id", userIds);

            console.log("プロファイル取得結果:", profiles);
            console.log("プロファイル取得エラー:", profilesError);

            const membersWithProfiles = membersData.map((member) => {
              const profile = profiles?.find((p) => p.id === member.user_id);
              return {
                ...member,
                user_profiles: profile || null,
              };
            });

            setMembers(membersWithProfiles);
          }

          const { data: upcomingData } = await supabase
            .from("games")
            .select("*")
            .eq("home_team_id", teamId)
            .eq("status", "scheduled")
            .gte("game_date", new Date().toISOString().split("T")[0])
            .order("game_date", { ascending: true })
            .limit(5);

          if (upcomingData) {
            setUpcomingGames(upcomingData);
          }
        }

        if (teamData.owner_id === user.id) {
          const { data: requestsData } = await supabase
            .from("team_join_requests")
            .select(
              `
              *,
              user_profiles!team_join_requests_user_id_fkey (
                id,
                display_name
              )
            `
            )
            .eq("team_id", teamId)
            .eq("status", "pending")
            .order("requested_at", { ascending: false });

          if (requestsData) {
            setJoinRequests(requestsData);
          }
        }

        if (!isTeamMember) {
          const { data: existingRequest } = await supabase
            .from("team_join_requests")
            .select("id")
            .eq("team_id", teamId)
            .eq("user_id", user.id)
            .eq("status", "pending")
            .single();

          setHasRequestPending(!!existingRequest);
        }
      }
    } catch (error) {
      console.error("データ取得エラー:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleJoinRequest = async () => {
    if (!user) {
      router.push("/login");
      return;
    }

    setSubmitting(true);
    try {
      const { error } = await supabase.from("team_join_requests").insert({
        team_id: teamId,
        user_id: user.id,
        message: joinMessage.trim() || null,
        status: "pending",
      });

      if (error) {
        console.error("参加申請エラー:", error);
        alert("参加申請の送信に失敗しました");
        return;
      }

      setHasRequestPending(true);
      setJoinMessage("");
      alert("参加申請を送信しました");
    } catch (error) {
      console.error("参加申請エラー:", error);
      alert("参加申請の送信に失敗しました");
    } finally {
      setSubmitting(false);
    }
  };

  const handleApproveRequest = async (requestId: string, userId: string) => {
    try {

      const { error: updateError } = await supabase
        .from("team_join_requests")
        .update({
          status: "approved",
          responded_at: new Date().toISOString(),
          responded_by: user?.id,
        })
        .eq("id", requestId);

      if (updateError) {
        console.error("承認エラー:", updateError);
        alert("承認に失敗しました");
        return;
      }

      const { error: memberError } = await supabase
        .from("team_members")
        .insert({
          team_id: teamId,
          user_id: userId,
          role: "player",
        });

      if (memberError) {
        console.error("メンバー追加エラー:", memberError);
        alert("メンバー追加に失敗しました");
        return;
      }

      fetchTeamData();
      alert("参加申請を承認しました");
    } catch (error) {
      console.error("承認エラー:", error);
      alert("承認に失敗しました");
    }
  };

  const handleRejectRequest = async (requestId: string) => {
    try {
      const { error } = await supabase
        .from("team_join_requests")
        .update({
          status: "rejected",
          responded_at: new Date().toISOString(),
          responded_by: user?.id,
        })
        .eq("id", requestId);

      if (error) {
        console.error("却下エラー:", error);
        alert("却下に失敗しました");
        return;
      }

      setJoinRequests(joinRequests.filter((req) => req.id !== requestId));
      alert("参加申請を却下しました");
    } catch (error) {
      console.error("却下エラー:", error);
      alert("却下に失敗しました");
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!team) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600 mb-4">チームが見つかりません</p>
          <Link href="/teams" className="text-blue-600 hover:text-blue-700">
            チーム一覧に戻る
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {}
        <div className="mb-6">
          <Link
            href="/teams"
            className="inline-flex items-center text-gray-600 hover:text-gray-900"
          >
            <svg
              className="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M10 19l-7-7m0 0l7-7m-7 7h18"
              />
            </svg>
            チーム一覧に戻る
          </Link>
        </div>

        {}
        <div className="bg-white shadow rounded-lg p-6 mb-6">
          <div className="flex justify-between items-start mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {team.name}
              </h1>
              {(team.prefecture || team.city) && (
                <p className="text-sm text-gray-600 mb-2">
                  活動地域: {team.prefecture || ""} {team.city || ""}
                </p>
              )}
              <p className="text-gray-600">{team.description}</p>
            </div>
            {isOwner && (
              <div className="flex gap-2">
                <Link
                  href={`/teams/${teamId}/edit`}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  チーム編集
                </Link>
                <Link
                  href={`/teams/${teamId}/games`}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  試合管理
                </Link>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {}
          {isMember && (
            <div className="lg:col-span-1">
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4">
                  メンバー
                </h2>
                <div className="space-y-2">
                  {members.map((member) => (
                    <div
                      key={member.id}
                      className="flex justify-between items-center py-2 border-b last:border-b-0"
                    >
                      <span className="text-gray-700">
                        {member.user_profiles?.display_name || "名前未設定"}
                      </span>
                      <span className="text-sm text-gray-500">
                        {member.role === "owner" ? "オーナー" : "メンバー"}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {}
          <div className={isMember ? "lg:col-span-2" : "lg:col-span-3"}>
            {}
            {isMember && upcomingGames.length > 0 && (
              <div className="bg-white shadow rounded-lg p-6 mb-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold text-gray-900">
                    今後の予定
                  </h2>
                  <Link
                    href="/games/new"
                    className="text-blue-600 hover:text-blue-700 text-sm"
                  >
                    新規試合作成 →
                  </Link>
                </div>
                <div className="space-y-3">
                  {upcomingGames.map((game) => (
                    <Link
                      key={game.id}
                      href={`/games/${game.id}`}
                      className="block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <p className="font-semibold text-gray-900">
                            {game.name}
                          </p>
                          <p className="text-sm text-gray-600">
                            {new Date(game.game_date).toLocaleDateString(
                              "ja-JP"
                            )}{" "}
                            {game.game_time || ""}
                          </p>
                          <p className="text-sm text-gray-500">
                            vs {game.opponent_name}
                          </p>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}

            {}
            {completedGames.length > 0 && (
              <div className="bg-white shadow rounded-lg p-6">
                <h2 className="text-xl font-bold text-gray-900 mb-4">
                  最近の試合結果
                </h2>
                <div className="space-y-3">
                  {completedGames.map((game) => (
                    <Link
                      key={game.id}
                      href={`/games/${game.id}`}
                      className="block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <p className="font-semibold text-gray-900">
                            {game.name}
                          </p>
                          <p className="text-sm text-gray-600">
                            {new Date(game.game_date).toLocaleDateString(
                              "ja-JP"
                            )}
                          </p>
                          <p className="text-sm text-gray-500">
                            vs {game.opponent_name}
                          </p>
                        </div>
                        <div className="text-right">
                          <span
                            className={
                              game.home_score > game.opponent_score
                                ? "text-blue-600 font-bold"
                                : "text-gray-900"
                            }
                          >
                            {game.home_score}
                          </span>
                          <span className="mx-2 text-gray-400">-</span>
                          <span
                            className={
                              game.opponent_score > game.home_score
                                ? "text-red-600 font-bold"
                                : "text-gray-900"
                            }
                          >
                            {game.opponent_score}
                          </span>
                        </div>
                      </div>
                    </Link>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>

        {}
        {user && !isMember && !hasRequestPending && (
          <div className="mt-6 bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">
              チーム参加申請
            </h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  メッセージ（任意）
                </label>
                <textarea
                  value={joinMessage}
                  onChange={(e) => setJoinMessage(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  placeholder="自己紹介やアピールポイントなど"
                />
              </div>
              <button
                onClick={handleJoinRequest}
                disabled={submitting}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
              >
                {submitting ? "送信中..." : "参加申請を送る"}
              </button>
            </div>
          </div>
        )}

        {}
        {hasRequestPending && (
          <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-blue-700">
              参加申請を送信済みです。承認をお待ちください。
            </p>
          </div>
        )}

        {}
        {isOwner && joinRequests.length > 0 && (
          <div className="mt-6 bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-bold text-gray-900 mb-4">参加申請</h2>
            <div className="space-y-4">
              {joinRequests.map((request) => (
                <div
                  key={request.id}
                  className="border rounded-lg p-4 bg-gray-50"
                >
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <p className="font-semibold text-gray-900">
                        {request.user_profiles?.display_name || "名前未設定"}
                      </p>
                      <p className="text-sm text-gray-500">
                        {new Date(request.requested_at).toLocaleDateString(
                          "ja-JP"
                        )}
                      </p>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() =>
                          handleApproveRequest(request.id, request.user_id)
                        }
                        className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition-colors"
                      >
                        承認
                      </button>
                      <button
                        onClick={() => handleRejectRequest(request.id)}
                        className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors"
                      >
                        却下
                      </button>
                    </div>
                  </div>
                  {request.message && (
                    <p className="text-gray-600 mt-2">{request.message}</p>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
        {}
        {isMember && (
          <div className="mb-8">
            <TeamOperationStats teamId={teamId} />
          </div>
        )}
        {}
        {isMember && (
          <div className="mb-8">
            <TeamMemberStats teamId={teamId} />
          </div>
        )}
      </div>
    </div>
  );
}


================================================================================
FILE: src/app/teams/create/page.tsx
================================================================================

"use client";

import { useState, useEffect } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { prefectures, cities } from "@/lib/japanData";

export default function CreateTeamPage() {
  const [teamName, setTeamName] = useState("");
  const [description, setDescription] = useState("");
  const [prefecture, setPrefecture] = useState("");
  const [city, setCity] = useState("");
  const [availableCities, setAvailableCities] = useState<string[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const { user } = useAuth();
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {

    if (!user) {
      console.log("ユーザー未認証");
    }
  }, [user]);

  useEffect(() => {
    if (prefecture) {
      setAvailableCities(cities[prefecture] || []);
      setCity("");
    } else {
      setAvailableCities([]);
      setCity("");
    }
  }, [prefecture]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) {
      setError("ログインが必要です");
      return;
    }

    if (!teamName.trim()) {
      setError("チーム名を入力してください");
      return;
    }

    setLoading(true);
    setError("");

    try {

      const { data, error: createError } = await supabase
        .from("teams")
        .insert([
          {
            name: teamName.trim(),
            description: description.trim() || null,
            prefecture: prefecture || null,
            city: city || null,
            owner_id: user.id,
          },
        ])
        .select()
        .single();

      if (createError) {
        console.error("チーム作成エラー:", createError);
        setError(`エラー: ${createError.message}`);
        return;
      }

      console.log("チーム作成成功:", data);

      if (data) {

        const { error: memberError } = await supabase
          .from("team_members")
          .insert({
            team_id: data.id,
            user_id: user.id,
            role: 'owner',
            joined_at: new Date().toISOString()
          });

        if (memberError) {
          console.log("オーナー追加エラー（トリガーで処理済みの可能性）:", memberError);
        }

        router.push(`/teams/${data.id}`);
      }
    } catch (error) {
      console.error("予期しないエラー:", error);
      setError("予期しないエラーが発生しました");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-6">
          <Link
            href="/teams"
            className="inline-flex items-center text-gray-600 hover:text-gray-900"
          >
            <svg
              className="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            チーム一覧に戻る
          </Link>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <h1 className="text-2xl font-bold text-gray-900 mb-6">
            新しいチームを作成
          </h1>

          {error && (
            <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-600">{error}</p>
            </div>
          )}

          <form onSubmit={handleSubmit}>
            <div className="mb-6">
              <label
                htmlFor="teamName"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                チーム名 <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="teamName"
                value={teamName}
                onChange={(e) => setTeamName(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="例: 草野球チーム太陽"
                maxLength={50}
                required
              />
            </div>

            <div className="mb-6">
              <label
                htmlFor="description"
                className="block text-sm font-medium text-gray-700 mb-2"
              >
                チームの説明
              </label>
              <textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="チームの特徴や活動内容を入力してください"
                rows={4}
                maxLength={200}
              />
            </div>

            {}
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                主な活動地域
              </label>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    htmlFor="prefecture"
                    className="block text-xs text-gray-600 mb-1"
                  >
                    都道府県
                  </label>
                  <select
                    id="prefecture"
                    value={prefecture}
                    onChange={(e) => setPrefecture(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">選択してください</option>
                    {prefectures.map((pref) => (
                      <option key={pref} value={pref}>
                        {pref}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label
                    htmlFor="city"
                    className="block text-xs text-gray-600 mb-1"
                  >
                    市区町村
                  </label>
                  <select
                    id="city"
                    value={city}
                    onChange={(e) => setCity(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={!prefecture}
                  >
                    <option value="">
                      {prefecture ? "選択してください" : "都道府県を先に選択"}
                    </option>
                    {availableCities.map((cityName) => (
                      <option key={cityName} value={cityName}>
                        {cityName}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <p className="mt-1 text-xs text-gray-500">
                チームの主な活動地域を設定すると、近くのチームを探しやすくなります
              </p>
            </div>

            <div className="flex justify-end space-x-4">
              <Link
                href="/teams"
                className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300"
              >
                キャンセル
              </Link>
              <button
                type="submit"
                disabled={loading || !teamName.trim()}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? "作成中..." : "チームを作成"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: src/app/teams/page.tsx
================================================================================

"use client";

import { useEffect, useState } from "react";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import { useAuth } from "@/components/auth/AuthProvider";
import Link from "next/link";
import { useRouter } from "next/navigation";

interface Team {
  id: string;
  name: string;
  description: string;
  created_at: string;
  owner_id: string;
}

interface TeamWithRole extends Team {
  role: 'owner' | 'member';
}

export default function TeamsPage() {
  const [teams, setTeams] = useState<TeamWithRole[]>([]);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  const router = useRouter();
  const supabase = createClientComponentClient();

  useEffect(() => {

    if (user) {
      fetchTeams();
    }
  }, [user]);

  const fetchTeams = async () => {
    try {
      const allTeams: TeamWithRole[] = [];
      const teamIds = new Set<string>();

      const { data: ownedTeams, error: ownedError } = await supabase
        .from("teams")
        .select("*")
        .eq("owner_id", user?.id)
        .order("created_at", { ascending: false });

      if (ownedError) {
        console.error("所有チーム取得エラー:", ownedError);
      } else if (ownedTeams) {
        ownedTeams.forEach(team => {
          if (!teamIds.has(team.id)) {
            allTeams.push({
              ...team,
              role: 'owner'
            });
            teamIds.add(team.id);
          }
        });
      }

      const { data: memberData, error: memberError } = await supabase
        .from("team_members")
        .select(`
          team_id,
          role,
          teams:team_id (
            id,
            name,
            description,
            created_at,
            owner_id
          )
        `)
        .eq("user_id", user?.id);

      if (memberError) {
        console.error("所属チーム取得エラー:", memberError);
      } else if (memberData) {
        memberData.forEach(member => {
          const team = member.teams as unknown as Team;
          if (team && !teamIds.has(team.id)) {
            allTeams.push({
              ...team,
              role: 'member'
            });
            teamIds.add(team.id);
          }
        });
      }

      allTeams.sort((a, b) =>
        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
      );

      setTeams(allTeams);
    } catch (error) {
      console.error("チーム取得エラー:", error);
      setTeams([]);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">マイチーム</h1>
            <p className="text-gray-600 mt-1">
              所属チーム数: {teams.length}
            </p>
          </div>
          <div className="flex space-x-2">
            <Link
              href="/search/teams"
              className="px-4 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50 transition-colors"
            >
              チームを探す
            </Link>
            <Link
              href="/teams/create"
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              新しいチームを作成
            </Link>
          </div>
        </div>

        {}
        {teams.length === 0 ? (
          <div className="bg-white rounded-lg shadow p-8 text-center">
            <svg
              className="mx-auto h-12 w-12 text-gray-400 mb-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
              />
            </svg>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              チームがありません
            </h3>
            <p className="text-gray-500 mb-4">
              最初のチームを作成して、仲間を招待しましょう
            </p>
            <div className="space-y-2">
              <Link
                href="/teams/create"
                className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <svg
                  className="w-5 h-5 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                  />
                </svg>
                チームを作成
              </Link>
              <div className="mt-2">
                <Link
                  href="/search/teams"
                  className="text-blue-600 hover:text-blue-700"
                >
                  既存のチームを探す →
                </Link>
              </div>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {teams.map((team) => (
              <Link
                key={team.id}
                href={`/teams/${team.id}`}
                className="bg-white rounded-lg shadow hover:shadow-lg transition-shadow p-6"
              >
                <div className="flex items-center mb-4">
                  <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                    <span className="text-blue-600 font-bold text-lg">
                      {team.name.charAt(0).toUpperCase()}
                    </span>
                  </div>
                  <div className="ml-3 flex-1">
                    <h3 className="text-lg font-semibold text-gray-900">
                      {team.name}
                    </h3>
                    {team.role === 'owner' && (
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
                        オーナー
                      </span>
                    )}
                    {team.role === 'member' && (
                      <span className="inline-block px-2 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">
                        メンバー
                      </span>
                    )}
                  </div>
                </div>
                <p className="text-gray-600 mb-4 line-clamp-2">
                  {team.description || "チームの説明はありません"}
                </p>
                <div className="flex items-center text-sm text-gray-500">
                  <svg
                    className="w-4 h-4 mr-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                  </svg>
                  {new Date(team.created_at).toLocaleDateString("ja-JP")}
                </div>
              </Link>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


